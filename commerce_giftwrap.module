<?php
/**
 * @file
 * This module adds a new checkout pane with configuration settings to allow users to select a gift wrapping option to 
 * add to their order. Store owners can set a price for gift wrapping and add some additional information about the service.
 */
 
 /**
 * Implements hook_help().
 */
function commerce_giftwrap_help($path, $arg) {
  switch ($path) {
    case 'admin/help#commerce_giftwrap':
      return t('This module provides a checkout pane for users to select if they would like their order gift wrapping.
        Settings for the gift wrapping can be found in the checkout settings page at Store > Configuration > Checkout Settings.');
  }
}

/**
 * Implements hook_menu().
 */
function commerce_giftwrap_menu() {
  $items = array();

  // Giftwrap tab on orders.
  $items['admin/commerce/orders/%commerce_order/giftwrap'] = array(
    'title' => 'Gift Wrapping',
    'page callback' => 'commerce_giftwrap_order_tab',
    'page arguments' => array(3),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('view', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'commerce_giftwrap_order.inc',
  );
  return $items;
}

/**
* Implements hook_enable().
*/
function commerce_giftwrap_enable() {
  commerce_product_line_item_configuration('giftwrap');
}
/**
 * This function is called by the line item module when it is enabled or this
 * module is enabled. It invokes this function using the configuration_callback
 * as specified above.
 */
function commerce_giftwrap_configure_line_item() {
  //Create the message field
  $field = array(
    'field_name' => 'commerce_giftwrap_message',
    'type' => 'text',
  );
  field_create_field($field);
  
  //Add the field to the Giftwrap Line Item
  $instance = array(
    'field_name' => 'commerce_giftwrap_message',
    'entity_type' => 'commerce_line_item',
    'bundle' => 'giftwrap',
    'label' => t('Giftwrap Message'),
    'description' => t('The Giftwrap Message'),
    'widget' => array(
      'type' => 'text_textfield',
      'weight' => 10,
    ),
  );
  field_create_instance($instance);
}

/**
 * Implements hook_commerce_checkout_pane_info().
 */
function commerce_giftwrap_commerce_checkout_pane_info() {
  $panes['commerce_giftwrap'] = array(
    'title' => t('Gift Wrapping'),
    'page' => 'checkout',
    'weight' => 10,
    'file' => 'commerce_giftwrap_checkout_pane.inc',
    'base' => 'commerce_giftwrap_pane'
  );
  return $panes;
}

/**
 * Implements hook_commerce_price_component_type_info().
 */
function commerce_giftwrap_commerce_price_component_type_info() {
  return array(
    'giftwrap' => array(
      'title' => t('Gift Wrapping'),
      'weight' => -40,
    ),
  );
}

/**
 * Deletes all giftwrap line items on an order.
 *
 * @param $order
 *  The order object to delete the giftwrap line items from.
 */
function commerce_giftwrap_delete_giftwrap_line_items($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    // If this line item is a giftwrap line item...
    if ($line_item_wrapper->type->value() == 'giftwrap') {
      // Store its ID for later deletion and remove the reference from the line
      // item reference field.
      $line_item_id = $line_item_wrapper->line_item_id->value();
      $order_wrapper->commerce_line_items->offsetUnset($delta);
    }
  }

  // If we found any giftwrap line items...
  if (!empty($line_item_id)) {
    // First save the order to update the line item reference field value.
    commerce_order_save($order);
    // Then delete the line items.
    commerce_line_item_delete($line_item_id);
  }
}

/**
 * Checks if an order contains a giftwrap line item.
 *
 * @param $order
 *  The order object to check for a giftwrap line item.
 * 
 * @return TRUE if the order contains a giftwrap line item.
 */
function commerce_giftwrap_line_item_exists($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  
  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    // If this line item is a giftwrap line item...
    if ($line_item_wrapper->type->value() == 'giftwrap') {
      return TRUE;
    }
  }
}
